{
  if (getBuilder() == null)   throw new IllegalStateException("ColorChooserDialog should be created using its Builder interface.");
  generateColors();
  final int preselectTop=preselectTop();
  if (preselectTop != 0) {
    for (int i=0; i < mColorsTop.length; i++) {
      if (mColorsTop[i] == preselectTop) {
        topIndex(i);
        final int preselectSub=preselectSub();
        if (preselectSub != 0) {
          for (int b=0; b < mColorsSub[i].length; b++) {
            if (preselectSub == mColorsSub[i][b]) {
              subIndex(b);
              break;
            }
          }
          preselectSub(0);
        }
        break;
      }
    }
    preselectTop(0);
  }
  final DisplayMetrics dm=getResources().getDisplayMetrics();
  mCircleSize=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,56,dm);
  mGrid=new GridView(getContext());
  mGrid.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  mGrid.setColumnWidth(mCircleSize);
  mGrid.setNumColumns(GridView.AUTO_FIT);
  final int eightDp=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,8,dm);
  mGrid.setVerticalSpacing(eightDp);
  mGrid.setHorizontalSpacing(eightDp);
  final int sixteenDp=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,16,dm);
  mGrid.setPadding(sixteenDp,sixteenDp,sixteenDp,sixteenDp);
  mGrid.setClipToPadding(false);
  mGrid.setStretchMode(GridView.STRETCH_COLUMN_WIDTH);
  mGrid.setGravity(Gravity.CENTER);
  MaterialDialog dialog=new MaterialDialog.Builder(getActivity()).title(title()).autoDismiss(false).customView(mGrid,false).positiveText(R.string.done).callback(new MaterialDialog.ButtonCallback(){
    @Override public void onPositive(    MaterialDialog dialog){
      super.onPositive(dialog);
      int topLevelColor=0;
      int subLevelColor=0;
      if (topIndex() > -1)       topLevelColor=mColorsTop[topIndex()];
      if (subIndex() > -1)       subLevelColor=mColorsSub[topIndex()][subIndex()];
      mCallback.onColorSelection(title(),topLevelColor,subLevelColor);
      dismiss();
    }
    @Override public void onNeutral(    MaterialDialog dialog){
      super.onNeutral(dialog);
      dialog.setActionButton(DialogAction.NEUTRAL,null);
      isInSub(false);
      invalidate();
    }
  }
).build();
  invalidate();
  return dialog;
}
