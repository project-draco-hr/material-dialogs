{
  if (getBuilder() == null)   throw new IllegalStateException("ColorChooserDialog should be created using its Builder interface.");
  generateColors();
  final int preselectColor=getBuilder().mPreselect;
  if (preselectColor != 0) {
    for (int topIndex=0; topIndex < mColorsTop.length; topIndex++) {
      if (mColorsTop[topIndex] == preselectColor) {
        topIndex(topIndex);
        if (getBuilder().mAccentMode) {
          subIndex(2);
        }
 else         subIndex(5);
        break;
      }
      boolean found=false;
      for (int subIndex=0; subIndex < mColorsSub[topIndex].length; subIndex++) {
        if (mColorsSub[topIndex][subIndex] == preselectColor) {
          topIndex(topIndex);
          subIndex(subIndex);
          found=true;
          break;
        }
      }
      if (found)       break;
    }
  }
  final DisplayMetrics dm=getResources().getDisplayMetrics();
  mCircleSize=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,56,dm);
  mGrid=new GridView(getContext());
  mGrid.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
  mGrid.setColumnWidth(mCircleSize);
  mGrid.setNumColumns(GridView.AUTO_FIT);
  final int eightDp=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,8,dm);
  mGrid.setVerticalSpacing(eightDp);
  mGrid.setHorizontalSpacing(eightDp);
  final int sixteenDp=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,16,dm);
  mGrid.setPadding(sixteenDp,sixteenDp,sixteenDp,sixteenDp);
  mGrid.setClipToPadding(false);
  mGrid.setStretchMode(GridView.STRETCH_COLUMN_WIDTH);
  mGrid.setGravity(Gravity.CENTER);
  MaterialDialog dialog=new MaterialDialog.Builder(getActivity()).title(getTitle()).autoDismiss(false).customView(mGrid,false).positiveText(R.string.done).callback(new MaterialDialog.ButtonCallback(){
    @Override public void onPositive(    MaterialDialog dialog){
      super.onPositive(dialog);
      int color=0;
      if (subIndex() > -1)       color=mColorsSub[topIndex()][subIndex()];
 else       if (topIndex() > -1)       color=mColorsTop[topIndex()];
      mCallback.onColorSelection(ColorChooserDialog.this,color);
      dismiss();
    }
    @Override public void onNeutral(    MaterialDialog dialog){
      super.onNeutral(dialog);
      dialog.setActionButton(DialogAction.NEUTRAL,null);
      isInSub(false);
      invalidate();
    }
  }
).build();
  invalidate();
  return dialog;
}
