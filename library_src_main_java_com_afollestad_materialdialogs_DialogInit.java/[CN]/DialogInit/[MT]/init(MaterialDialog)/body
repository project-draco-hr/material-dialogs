{
  final MaterialDialog.Builder builder=dialog.mBuilder;
  dialog.setCancelable(builder.cancelable);
  if (builder.backgroundColor == 0)   builder.backgroundColor=DialogUtils.resolveColor(builder.context,R.attr.md_background_color);
  if (builder.backgroundColor != 0) {
    GradientDrawable drawable=new GradientDrawable();
    drawable.setCornerRadius(builder.context.getResources().getDimension(R.dimen.md_bg_corner_radius));
    drawable.setColor(builder.backgroundColor);
    DialogUtils.setBackgroundCompat(dialog.view,drawable);
  }
  builder.positiveColor=DialogUtils.resolveColor(builder.context,R.attr.md_positive_color,builder.positiveColor);
  builder.neutralColor=DialogUtils.resolveColor(builder.context,R.attr.md_neutral_color,builder.neutralColor);
  builder.negativeColor=DialogUtils.resolveColor(builder.context,R.attr.md_negative_color,builder.negativeColor);
  builder.widgetColor=DialogUtils.resolveColor(builder.context,R.attr.md_widget_color,builder.widgetColor);
  if (!builder.titleColorSet) {
    final int titleColorFallback=DialogUtils.resolveColor(builder.context,android.R.attr.textColorPrimary);
    builder.titleColor=DialogUtils.resolveColor(builder.context,R.attr.md_title_color,titleColorFallback);
    if (builder.titleColor == titleColorFallback) {
      if (DialogUtils.isColorDark(builder.titleColor)) {
        if (builder.theme == Theme.DARK)         builder.titleColor=DialogUtils.resolveColor(builder.context,android.R.attr.textColorPrimaryInverse);
      }
 else       if (builder.theme == Theme.LIGHT)       builder.titleColor=DialogUtils.resolveColor(builder.context,android.R.attr.textColorPrimaryInverse);
    }
  }
  if (!builder.contentColorSet) {
    final int contentColorFallback=DialogUtils.resolveColor(builder.context,android.R.attr.textColorSecondary);
    builder.contentColor=DialogUtils.resolveColor(builder.context,R.attr.md_content_color,contentColorFallback);
    if (builder.contentColor == contentColorFallback) {
      if (DialogUtils.isColorDark(builder.contentColor)) {
        if (builder.theme == Theme.DARK)         builder.contentColor=DialogUtils.resolveColor(builder.context,android.R.attr.textColorSecondaryInverse);
      }
 else       if (builder.theme == Theme.LIGHT)       builder.contentColor=DialogUtils.resolveColor(builder.context,android.R.attr.textColorSecondaryInverse);
    }
  }
  if (!builder.itemColorSet)   builder.itemColor=DialogUtils.resolveColor(builder.context,R.attr.md_item_color,builder.contentColor);
  dialog.title=(TextView)dialog.view.findViewById(R.id.title);
  dialog.icon=(ImageView)dialog.view.findViewById(R.id.icon);
  dialog.titleFrame=dialog.view.findViewById(R.id.titleFrame);
  dialog.content=(TextView)dialog.view.findViewById(R.id.content);
  dialog.listView=(ListView)dialog.view.findViewById(R.id.contentListView);
  dialog.positiveButton=(MDButton)dialog.view.findViewById(R.id.buttonDefaultPositive);
  dialog.neutralButton=(MDButton)dialog.view.findViewById(R.id.buttonDefaultNeutral);
  dialog.negativeButton=(MDButton)dialog.view.findViewById(R.id.buttonDefaultNegative);
  if (builder.inputCallback != null && builder.positiveText == null)   builder.positiveText=builder.context.getText(android.R.string.ok);
  dialog.positiveButton.setVisibility(builder.positiveText != null ? View.VISIBLE : View.GONE);
  dialog.neutralButton.setVisibility(builder.neutralText != null ? View.VISIBLE : View.GONE);
  dialog.negativeButton.setVisibility(builder.negativeText != null ? View.VISIBLE : View.GONE);
  if (builder.icon != null) {
    dialog.icon.setVisibility(View.VISIBLE);
    dialog.icon.setImageDrawable(builder.icon);
  }
 else {
    Drawable d=DialogUtils.resolveDrawable(builder.context,R.attr.md_icon);
    if (d != null) {
      dialog.icon.setVisibility(View.VISIBLE);
      dialog.icon.setImageDrawable(d);
    }
 else {
      dialog.icon.setVisibility(View.GONE);
    }
  }
  int maxIconSize=builder.maxIconSize;
  if (maxIconSize == -1)   maxIconSize=DialogUtils.resolveDimension(builder.context,R.attr.md_icon_max_size);
  if (builder.limitIconToDefaultSize || DialogUtils.resolveBoolean(builder.context,R.attr.md_icon_limit_icon_to_default_size))   maxIconSize=builder.context.getResources().getDimensionPixelSize(R.dimen.md_icon_max_size);
  if (maxIconSize > -1) {
    dialog.icon.setAdjustViewBounds(true);
    dialog.icon.setMaxHeight(maxIconSize);
    dialog.icon.setMaxWidth(maxIconSize);
    dialog.icon.requestLayout();
  }
  final int dividerFallback=DialogUtils.resolveColor(dialog.getContext(),R.attr.md_divider);
  builder.dividerColor=DialogUtils.resolveColor(builder.context,R.attr.md_divider_color,dividerFallback);
  dialog.view.setDividerColor(builder.dividerColor);
  if (builder.title == null) {
    dialog.titleFrame.setVisibility(View.GONE);
  }
 else {
    dialog.title.setText(builder.title);
    dialog.setTypeface(dialog.title,builder.mediumFont);
    dialog.title.setTextColor(builder.titleColor);
    dialog.title.setGravity(builder.titleGravity.getGravityInt());
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
      dialog.title.setTextAlignment(builder.titleGravity.getTextAlignment());
    }
  }
  if (dialog.content != null && builder.content != null) {
    dialog.content.setText(builder.content);
    dialog.content.setMovementMethod(new LinkMovementMethod());
    dialog.setTypeface(dialog.content,builder.regularFont);
    dialog.content.setLineSpacing(0f,builder.contentLineSpacingMultiplier);
    if (builder.positiveColor == 0) {
      dialog.content.setLinkTextColor(DialogUtils.resolveColor(dialog.getContext(),android.R.attr.textColorPrimary));
    }
 else {
      dialog.content.setLinkTextColor(builder.positiveColor);
    }
    dialog.content.setTextColor(builder.contentColor);
    dialog.content.setGravity(builder.contentGravity.getGravityInt());
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
      dialog.content.setTextAlignment(builder.contentGravity.getTextAlignment());
    }
  }
 else   if (dialog.content != null) {
    dialog.content.setVisibility(View.GONE);
  }
  dialog.view.setButtonGravity(builder.buttonsGravity);
  dialog.view.setButtonStackedGravity(builder.btnStackedGravity);
  dialog.view.setForceStack(builder.forceStacking);
  boolean textAllCaps;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    textAllCaps=DialogUtils.resolveBoolean(builder.context,android.R.attr.textAllCaps,true);
    if (textAllCaps)     textAllCaps=DialogUtils.resolveBoolean(builder.context,R.attr.textAllCaps,true);
  }
 else {
    textAllCaps=DialogUtils.resolveBoolean(builder.context,R.attr.textAllCaps,true);
  }
  MDButton positiveTextView=dialog.positiveButton;
  dialog.setTypeface(positiveTextView,builder.mediumFont);
  positiveTextView.setAllCapsCompat(textAllCaps);
  positiveTextView.setText(builder.positiveText);
  positiveTextView.setTextColor(getActionTextStateList(builder.context,builder.positiveColor));
  dialog.positiveButton.setStackedSelector(dialog.getButtonSelector(DialogAction.POSITIVE,true));
  dialog.positiveButton.setDefaultSelector(dialog.getButtonSelector(DialogAction.POSITIVE,false));
  dialog.positiveButton.setTag(DialogAction.POSITIVE);
  dialog.positiveButton.setOnClickListener(dialog);
  dialog.positiveButton.setVisibility(View.VISIBLE);
  MDButton negativeTextView=dialog.negativeButton;
  dialog.setTypeface(negativeTextView,builder.mediumFont);
  negativeTextView.setAllCapsCompat(textAllCaps);
  negativeTextView.setText(builder.negativeText);
  negativeTextView.setTextColor(getActionTextStateList(builder.context,builder.negativeColor));
  dialog.negativeButton.setStackedSelector(dialog.getButtonSelector(DialogAction.NEGATIVE,true));
  dialog.negativeButton.setDefaultSelector(dialog.getButtonSelector(DialogAction.NEGATIVE,false));
  dialog.negativeButton.setTag(DialogAction.NEGATIVE);
  dialog.negativeButton.setOnClickListener(dialog);
  dialog.negativeButton.setVisibility(View.VISIBLE);
  MDButton neutralTextView=dialog.neutralButton;
  dialog.setTypeface(neutralTextView,builder.mediumFont);
  neutralTextView.setAllCapsCompat(textAllCaps);
  neutralTextView.setText(builder.neutralText);
  neutralTextView.setTextColor(getActionTextStateList(builder.context,builder.neutralColor));
  dialog.neutralButton.setStackedSelector(dialog.getButtonSelector(DialogAction.NEUTRAL,true));
  dialog.neutralButton.setDefaultSelector(dialog.getButtonSelector(DialogAction.NEUTRAL,false));
  dialog.neutralButton.setTag(DialogAction.NEUTRAL);
  dialog.neutralButton.setOnClickListener(dialog);
  dialog.neutralButton.setVisibility(View.VISIBLE);
  if (builder.listCallbackMultiChoice != null)   dialog.selectedIndicesList=new ArrayList<>();
  if (dialog.listView != null && (builder.items != null && builder.items.length > 0 || builder.adapter != null)) {
    dialog.listView.setSelector(dialog.getListSelector());
    if (builder.adapter == null) {
      if (builder.listCallbackSingleChoice != null) {
        dialog.listType=MaterialDialog.ListType.SINGLE;
      }
 else       if (builder.listCallbackMultiChoice != null) {
        dialog.listType=MaterialDialog.ListType.MULTI;
        if (builder.selectedIndices != null)         dialog.selectedIndicesList=new ArrayList<>(Arrays.asList(builder.selectedIndices));
      }
 else {
        dialog.listType=MaterialDialog.ListType.REGULAR;
      }
      builder.adapter=new MaterialDialogAdapter(dialog,MaterialDialog.ListType.getLayoutForType(dialog.listType),R.id.title,builder.items);
    }
 else     if (builder.adapter instanceof MaterialSimpleListAdapter) {
      ((MaterialSimpleListAdapter)builder.adapter).setDialog(dialog,false);
    }
  }
  setupProgressDialog(dialog);
  setupInputDialog(dialog);
  if (builder.customView != null) {
    ((MDRootLayout)dialog.view.findViewById(R.id.root)).noTitleNoPadding();
    FrameLayout frame=(FrameLayout)dialog.view.findViewById(R.id.customViewFrame);
    dialog.customViewFrame=frame;
    View innerView=builder.customView;
    if (builder.wrapCustomViewInScroll) {
      final Resources r=dialog.getContext().getResources();
      final int framePadding=r.getDimensionPixelSize(R.dimen.md_dialog_frame_margin);
      final ScrollView sv=new ScrollView(dialog.getContext());
      int paddingTop=r.getDimensionPixelSize(R.dimen.md_content_padding_top);
      int paddingBottom=r.getDimensionPixelSize(R.dimen.md_content_padding_bottom);
      sv.setClipToPadding(false);
      if (innerView instanceof EditText) {
        sv.setPadding(framePadding,paddingTop,framePadding,paddingBottom);
      }
 else {
        sv.setPadding(0,paddingTop,0,paddingBottom);
        innerView.setPadding(framePadding,0,framePadding,0);
      }
      sv.addView(innerView,new ScrollView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));
      innerView=sv;
    }
    frame.addView(innerView,new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));
  }
  if (builder.showListener != null)   dialog.setOnShowListener(builder.showListener);
  if (builder.cancelListener != null)   dialog.setOnCancelListener(builder.cancelListener);
  if (builder.dismissListener != null)   dialog.setOnDismissListener(builder.dismissListener);
  if (builder.keyListener != null)   dialog.setOnKeyListener(builder.keyListener);
  dialog.setOnShowListenerInternal();
  dialog.invalidateList();
  dialog.setViewInternal(dialog.view);
  dialog.checkIfListInitScroll();
}
