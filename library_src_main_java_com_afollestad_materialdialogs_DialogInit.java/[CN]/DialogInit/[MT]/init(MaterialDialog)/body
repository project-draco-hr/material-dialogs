{
  final MaterialDialog.Builder builder=dialog.mBuilder;
  if (!builder.useCustomFonts) {
    if (builder.mediumFont == null)     builder.mediumFont=TypefaceHelper.get(dialog.getContext(),"Roboto-Medium");
    if (builder.regularFont == null)     builder.regularFont=TypefaceHelper.get(dialog.getContext(),"Roboto-Regular");
  }
  dialog.setCancelable(builder.cancelable);
  if (builder.backgroundColor == 0)   builder.backgroundColor=DialogUtils.resolveColor(builder.context,R.attr.md_background_color);
  if (builder.backgroundColor != 0)   dialog.view.setBackgroundColor(builder.backgroundColor);
  builder.positiveColor=DialogUtils.resolveColor(builder.context,R.attr.md_positive_color,builder.positiveColor);
  builder.neutralColor=DialogUtils.resolveColor(builder.context,R.attr.md_neutral_color,builder.neutralColor);
  builder.negativeColor=DialogUtils.resolveColor(builder.context,R.attr.md_negative_color,builder.negativeColor);
  builder.progressColor=DialogUtils.resolveColor(builder.context,R.attr.md_progress_color,builder.progressColor);
  if (!builder.titleColorSet) {
    builder.titleColor=DialogUtils.resolveColor(builder.context,android.R.attr.textColorPrimary);
    if (DialogUtils.isColorDark(builder.titleColor)) {
      if (builder.theme == Theme.DARK)       builder.titleColor=DialogUtils.resolveColor(builder.context,android.R.attr.textColorPrimaryInverse);
    }
 else     if (builder.theme == Theme.LIGHT)     builder.titleColor=DialogUtils.resolveColor(builder.context,android.R.attr.textColorPrimaryInverse);
  }
  if (!builder.contentColorSet) {
    builder.contentColor=DialogUtils.resolveColor(builder.context,android.R.attr.textColorSecondary);
    if (DialogUtils.isColorDark(builder.contentColor)) {
      if (builder.theme == Theme.DARK)       builder.contentColor=DialogUtils.resolveColor(builder.context,android.R.attr.textColorSecondaryInverse);
    }
 else     if (builder.theme == Theme.LIGHT)     builder.contentColor=DialogUtils.resolveColor(builder.context,android.R.attr.textColorSecondaryInverse);
  }
  if (!builder.itemColorSet)   builder.itemColor=builder.contentColor;
  dialog.title=(TextView)dialog.view.findViewById(R.id.title);
  dialog.icon=(ImageView)dialog.view.findViewById(R.id.icon);
  dialog.titleFrame=dialog.view.findViewById(R.id.titleFrame);
  dialog.content=(TextView)dialog.view.findViewById(R.id.content);
  dialog.listView=(ListView)dialog.view.findViewById(R.id.contentListView);
  dialog.positiveButton=dialog.view.findViewById(R.id.buttonDefaultPositive);
  dialog.neutralButton=dialog.view.findViewById(R.id.buttonDefaultNeutral);
  dialog.negativeButton=dialog.view.findViewById(R.id.buttonDefaultNegative);
  dialog.positiveButton.setVisibility(builder.positiveText != null ? View.VISIBLE : View.GONE);
  dialog.neutralButton.setVisibility(builder.neutralText != null ? View.VISIBLE : View.GONE);
  dialog.negativeButton.setVisibility(builder.negativeText != null ? View.VISIBLE : View.GONE);
  if (builder.icon != null) {
    dialog.icon.setVisibility(View.VISIBLE);
    dialog.icon.setImageDrawable(builder.icon);
  }
 else {
    Drawable d=DialogUtils.resolveDrawable(builder.context,R.attr.md_icon);
    if (d != null) {
      dialog.icon.setVisibility(View.VISIBLE);
      dialog.icon.setImageDrawable(d);
    }
 else {
      dialog.icon.setVisibility(View.GONE);
    }
  }
  int maxIconSize=builder.maxIconSize;
  if (maxIconSize == -1)   maxIconSize=DialogUtils.resolveDimension(builder.context,R.attr.md_icon_max_size);
  if (builder.limitIconToDefaultSize || DialogUtils.resolveBoolean(builder.context,R.attr.md_icon_limit_icon_to_default_size))   maxIconSize=builder.context.getResources().getDimensionPixelSize(R.dimen.md_icon_max_size);
  if (maxIconSize > -1) {
    dialog.icon.setAdjustViewBounds(true);
    dialog.icon.setMaxHeight(maxIconSize);
    dialog.icon.setMaxWidth(maxIconSize);
    dialog.icon.requestLayout();
  }
  if (builder.title == null) {
    dialog.titleFrame.setVisibility(View.GONE);
  }
 else {
    dialog.title.setText(builder.title);
    dialog.setTypeface(dialog.title,builder.mediumFont);
    dialog.title.setTextColor(builder.titleColor);
    dialog.title.setGravity(MaterialDialog.gravityEnumToGravity(builder.titleGravity));
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
      dialog.title.setTextAlignment(MaterialDialog.gravityEnumToTextAlignment(builder.titleGravity));
    }
  }
  if (dialog.content != null && builder.content != null) {
    dialog.content.setText(builder.content);
    dialog.content.setMovementMethod(new LinkMovementMethod());
    dialog.setTypeface(dialog.content,builder.regularFont);
    dialog.content.setLineSpacing(0f,builder.contentLineSpacingMultiplier);
    if (builder.positiveColor == 0) {
      dialog.content.setLinkTextColor(DialogUtils.resolveColor(dialog.getContext(),android.R.attr.textColorPrimary));
    }
 else {
      dialog.content.setLinkTextColor(builder.positiveColor);
    }
    dialog.content.setTextColor(builder.contentColor);
    dialog.content.setGravity(MaterialDialog.gravityEnumToGravity(builder.contentGravity));
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
      dialog.content.setTextAlignment(MaterialDialog.gravityEnumToTextAlignment(builder.contentGravity));
    }
  }
 else   if (dialog.content != null) {
    dialog.content.setVisibility(View.GONE);
  }
  if (builder.listCallbackMultiChoice != null)   dialog.selectedIndicesList=new ArrayList<>();
  if (dialog.listView != null && (builder.items != null && builder.items.length > 0 || builder.adapter != null)) {
    dialog.listView.setSelector(dialog.getListSelector());
    if (builder.title != null) {
      dialog.listView.setPadding(dialog.listView.getPaddingLeft(),0,dialog.listView.getPaddingRight(),dialog.listView.getPaddingBottom());
    }
    if (dialog.hasActionButtons()) {
      dialog.listView.setPadding(dialog.listView.getPaddingLeft(),0,dialog.listView.getPaddingRight(),0);
    }
    if (builder.adapter == null) {
      if (builder.listCallbackSingleChoice != null) {
        dialog.listType=MaterialDialog.ListType.SINGLE;
      }
 else       if (builder.listCallbackMultiChoice != null) {
        dialog.listType=MaterialDialog.ListType.MULTI;
        if (builder.selectedIndices != null) {
          dialog.selectedIndicesList=new ArrayList<>(Arrays.asList(builder.selectedIndices));
        }
      }
 else {
        dialog.listType=MaterialDialog.ListType.REGULAR;
      }
      builder.adapter=new MaterialDialogAdapter(dialog,MaterialDialog.ListType.getLayoutForType(dialog.listType),R.id.title,builder.items);
    }
  }
  setupProgressDialog(dialog);
  if (builder.customView != null) {
    dialog.invalidateCustomViewAssociations();
    FrameLayout frame=(FrameLayout)dialog.view.findViewById(R.id.customViewFrame);
    dialog.customViewFrame=frame;
    View innerView=builder.customView;
    if (builder.wrapCustomViewInScroll) {
      final Resources r=dialog.getContext().getResources();
      final int framePadding=r.getDimensionPixelSize(R.dimen.md_dialog_frame_margin);
      final ScrollView sv=new ScrollView(dialog.getContext());
      int paddingTop;
      int paddingBottom;
      if (dialog.titleFrame.getVisibility() != View.GONE)       paddingTop=r.getDimensionPixelSize(R.dimen.md_content_vertical_padding);
 else       paddingTop=r.getDimensionPixelSize(R.dimen.md_dialog_frame_margin);
      if (dialog.hasActionButtons())       paddingBottom=r.getDimensionPixelSize(R.dimen.md_content_vertical_padding);
 else       paddingBottom=r.getDimensionPixelSize(R.dimen.md_dialog_frame_margin);
      sv.setClipToPadding(false);
      if (innerView instanceof EditText) {
        sv.setPadding(framePadding,paddingTop,framePadding,paddingBottom);
      }
 else {
        sv.setPadding(0,paddingTop,0,paddingBottom);
        innerView.setPadding(framePadding,0,framePadding,0);
      }
      sv.addView(innerView,new ScrollView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));
      innerView=sv;
    }
    frame.addView(innerView,new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));
  }
 else {
    dialog.invalidateCustomViewAssociations();
  }
  if (builder.showListener != null)   dialog.setOnShowListener(builder.showListener);
  if (builder.cancelListener != null)   dialog.setOnCancelListener(builder.cancelListener);
  if (builder.dismissListener != null)   dialog.setOnDismissListener(builder.dismissListener);
  if (builder.keyListener != null)   dialog.setOnKeyListener(builder.keyListener);
  dialog.updateFramePadding();
  dialog.invalidateList();
  dialog._setOnShowListenerInternal();
  dialog._setViewInternal(dialog.view);
  dialog.checkIfListInitScroll();
  dialog.view.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (dialog.view.getMeasuredWidth() > 0) {
        dialog.invalidateCustomViewAssociations();
      }
    }
  }
);
}
