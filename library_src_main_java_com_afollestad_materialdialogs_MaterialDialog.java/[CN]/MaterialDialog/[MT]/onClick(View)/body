{
  String tag=(String)v.getTag();
  if (tag.equals(POSITIVE)) {
    if (listCallbackSingle != null) {
      if (autoDismiss)       dismiss();
      LinearLayout list=(LinearLayout)view.findViewById(R.id.customViewFrame);
      for (int i=1; i < list.getChildCount(); i++) {
        View itemView=list.getChildAt(i);
        @SuppressLint("WrongViewCast") RadioButton rb=(RadioButton)itemView.findViewById(R.id.control);
        if (rb.isChecked()) {
          listCallbackSingle.onSelection(this,v,i - 1,((TextView)itemView.findViewById(R.id.title)).getText().toString());
          break;
        }
      }
    }
 else     if (listCallbackMulti != null) {
      if (autoDismiss)       dismiss();
      List<Integer> selectedIndices=new ArrayList<Integer>();
      List<String> selectedTitles=new ArrayList<String>();
      LinearLayout list=(LinearLayout)view.findViewById(R.id.customViewFrame);
      for (int i=1; i < list.getChildCount(); i++) {
        View itemView=list.getChildAt(i);
        @SuppressLint("WrongViewCast") CheckBox rb=(CheckBox)itemView.findViewById(R.id.control);
        if (rb.isChecked()) {
          selectedIndices.add(i - 1);
          selectedTitles.add(((TextView)itemView.findViewById(R.id.title)).getText().toString());
        }
      }
      listCallbackMulti.onSelection(this,selectedIndices.toArray(new Integer[selectedIndices.size()]),selectedTitles.toArray(new String[selectedTitles.size()]));
    }
 else     if (callback != null) {
      if (autoDismiss)       dismiss();
      callback.onPositive(this);
    }
  }
 else   if (tag.equals(NEGATIVE)) {
    if (callback != null && callback instanceof Callback) {
      if (autoDismiss)       dismiss();
      ((Callback)callback).onNegative(this);
    }
 else     if (autoDismiss)     dismiss();
  }
 else   if (tag.equals(NEUTRAL)) {
    if (callback != null && callback instanceof FullCallback) {
      if (autoDismiss)       dismiss();
      ((FullCallback)callback).onNeutral(this);
    }
 else     if (autoDismiss)     dismiss();
  }
 else {
    String[] split=tag.split(":");
    int index=Integer.parseInt(split[0]);
    if (listCallback != null) {
      if (autoDismiss)       dismiss();
      listCallback.onSelection(this,v,index,split[1]);
    }
 else     if (listCallbackSingle != null) {
      RadioButton cb=(RadioButton)((LinearLayout)v).getChildAt(0);
      if (!cb.isChecked())       cb.setChecked(true);
      invalidateSingleChoice(index);
    }
 else     if (listCallbackMulti != null) {
      CheckBox cb=(CheckBox)((LinearLayout)v).getChildAt(0);
      cb.setChecked(!cb.isChecked());
    }
 else     if (autoDismiss)     dismiss();
  }
}
