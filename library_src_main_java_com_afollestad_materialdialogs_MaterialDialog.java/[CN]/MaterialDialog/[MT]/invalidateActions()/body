{
  if (!hasActionButtons()) {
    view.findViewById(R.id.buttonDefaultFrame).setVisibility(View.GONE);
    view.findViewById(R.id.buttonStackedFrame).setVisibility(View.GONE);
    invalidateList();
    return false;
  }
  if (isStacked) {
    view.findViewById(R.id.buttonDefaultFrame).setVisibility(View.GONE);
    view.findViewById(R.id.buttonStackedFrame).setVisibility(View.VISIBLE);
  }
 else {
    view.findViewById(R.id.buttonDefaultFrame).setVisibility(View.VISIBLE);
    view.findViewById(R.id.buttonStackedFrame).setVisibility(View.GONE);
  }
  positiveButton=view.findViewById(isStacked ? R.id.buttonStackedPositive : R.id.buttonDefaultPositive);
  if (mBuilder.positiveText != null) {
    TextView positiveTextView=(TextView)((FrameLayout)positiveButton).getChildAt(0);
    setTypeface(positiveTextView,mBuilder.mediumFont);
    positiveTextView.setText(mBuilder.positiveText);
    positiveTextView.setTextColor(getActionTextStateList(mBuilder.positiveColor));
    setBackgroundCompat(positiveButton,getButtonSelector(DialogAction.POSITIVE));
    positiveButton.setTag(POSITIVE);
    positiveButton.setOnClickListener(this);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
      positiveTextView.setTextAlignment(gravityToAlignment(mBuilder.btnStackedGravity));
    }
 else {
      positiveTextView.setGravity(gravityIntToGravity(mBuilder.btnStackedGravity));
    }
  }
 else {
    positiveButton.setVisibility(View.GONE);
  }
  neutralButton=view.findViewById(isStacked ? R.id.buttonStackedNeutral : R.id.buttonDefaultNeutral);
  if (mBuilder.neutralText != null) {
    TextView neutralTextView=(TextView)((FrameLayout)neutralButton).getChildAt(0);
    setTypeface(neutralTextView,mBuilder.mediumFont);
    neutralButton.setVisibility(View.VISIBLE);
    neutralTextView.setTextColor(getActionTextStateList(mBuilder.neutralColor));
    setBackgroundCompat(neutralButton,getButtonSelector(DialogAction.NEUTRAL));
    neutralTextView.setText(mBuilder.neutralText);
    neutralButton.setTag(NEUTRAL);
    neutralButton.setOnClickListener(this);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
      neutralTextView.setTextAlignment(gravityToAlignment(mBuilder.btnStackedGravity));
    }
 else {
      neutralTextView.setGravity(gravityIntToGravity(mBuilder.btnStackedGravity));
    }
  }
 else {
    neutralButton.setVisibility(View.GONE);
  }
  negativeButton=view.findViewById(isStacked ? R.id.buttonStackedNegative : R.id.buttonDefaultNegative);
  if (mBuilder.negativeText != null) {
    TextView negativeTextView=(TextView)((FrameLayout)negativeButton).getChildAt(0);
    setTypeface(negativeTextView,mBuilder.mediumFont);
    negativeButton.setVisibility(View.VISIBLE);
    negativeTextView.setTextColor(getActionTextStateList(mBuilder.negativeColor));
    setBackgroundCompat(negativeButton,getButtonSelector(DialogAction.NEGATIVE));
    negativeTextView.setText(mBuilder.negativeText);
    negativeButton.setTag(NEGATIVE);
    negativeButton.setOnClickListener(this);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
      negativeTextView.setTextAlignment(gravityToAlignment(mBuilder.btnStackedGravity));
    }
 else {
      negativeTextView.setGravity(gravityIntToGravity(mBuilder.btnStackedGravity));
    }
    if (!isStacked) {
      RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,(int)getContext().getResources().getDimension(R.dimen.md_button_height));
      if (mBuilder.positiveText != null) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
          params.addRule(RelativeLayout.START_OF,R.id.buttonDefaultPositive);
        }
 else {
          params.addRule(RelativeLayout.LEFT_OF,R.id.buttonDefaultPositive);
        }
      }
 else {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
          params.addRule(RelativeLayout.ALIGN_PARENT_END);
        }
 else {
          params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        }
      }
      negativeButton.setLayoutParams(params);
    }
  }
 else {
    negativeButton.setVisibility(View.GONE);
  }
  invalidateList();
  return true;
}
