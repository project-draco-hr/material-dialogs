{
  super(getTheme(builder));
  this.regularFont=builder.regularFont;
  if (this.regularFont == null)   this.regularFont=Typeface.createFromAsset(getContext().getResources().getAssets(),"Roboto-Regular.ttf");
  this.mediumFont=builder.mediumFont;
  if (this.mediumFont == null)   this.mediumFont=Typeface.createFromAsset(getContext().getResources().getAssets(),"Roboto-Medium.ttf");
  this.mContext=builder.context;
  this.view=LayoutInflater.from(getContext()).inflate(R.layout.md_dialog,null);
  this.customView=builder.customView;
  this.callback=builder.callback;
  this.listCallback=builder.listCallback;
  this.listCallbackSingle=builder.listCallbackSingle;
  this.listCallbackMulti=builder.listCallbackMulti;
  this.positiveText=builder.positiveText;
  this.neutralText=builder.neutralText;
  this.negativeText=builder.negativeText;
  this.positiveColor=builder.positiveColor;
  this.negativeColor=builder.negativeColor;
  this.neutralColor=builder.neutralColor;
  this.items=builder.items;
  this.setCancelable(builder.cancelable);
  this.selectedIndex=builder.selectedIndex;
  this.selectedIndices=builder.selectedIndicies;
  this.mItemProcessor=builder.itemProcessor;
  this.autoDismiss=builder.autoDismiss;
  this.adapter=builder.adapter;
  title=(TextView)view.findViewById(R.id.title);
  icon=(ImageView)view.findViewById(R.id.icon);
  titleFrame=view.findViewById(R.id.titleFrame);
  final TextView content=(TextView)view.findViewById(R.id.content);
  content.setText(builder.content);
  content.setMovementMethod(new LinkMovementMethod());
  setTypeface(content,regularFont);
  content.setTextColor(DialogUtils.resolveColor(getContext(),android.R.attr.textColorSecondary));
  content.setLineSpacing(0f,builder.contentLineSpacingMultiplier);
  if (this.positiveColor == 0) {
    content.setLinkTextColor(DialogUtils.resolveColor(getContext(),android.R.attr.textColorPrimary));
  }
 else {
    content.setLinkTextColor(this.positiveColor);
  }
  if (builder.contentAlignment == Alignment.CENTER) {
    content.setGravity(Gravity.CENTER_HORIZONTAL);
  }
 else   if (builder.contentAlignment == Alignment.RIGHT) {
    content.setGravity(Gravity.RIGHT);
  }
  if (customView != null) {
    title=(TextView)view.findViewById(R.id.titleCustomView);
    icon=(ImageView)view.findViewById(R.id.iconCustomView);
    titleFrame=view.findViewById(R.id.titleFrameCustomView);
    invalidateCustomViewAssociations();
    ((LinearLayout)view.findViewById(R.id.customViewFrame)).addView(customView);
  }
 else {
    invalidateCustomViewAssociations();
  }
  if (builder.icon != null) {
    icon.setVisibility(View.VISIBLE);
    icon.setImageDrawable(builder.icon);
  }
 else {
    icon.setVisibility(View.GONE);
  }
  if (items != null && items.length > 0) {
    title=(TextView)view.findViewById(R.id.titleCustomView);
    boolean adapterProvided=adapter != null;
    if (!adapterProvided) {
      if (listCallbackSingle != null) {
        listType=ListType.SINGLE;
      }
 else       if (listCallbackMulti != null) {
        listType=ListType.MULTI;
        selectedIndicesList=new ArrayList<>(Arrays.asList(selectedIndices));
      }
 else {
        listType=ListType.REGULAR;
      }
      adapter=new MaterialDialogAdapter(mContext,ListType.getLayoutForType(listType),R.id.title,items);
    }
  }
  if (builder.title == null || builder.title.toString().trim().isEmpty()) {
    titleFrame.setVisibility(View.GONE);
    if (customView == null)     view.findViewById(R.id.titleFrameCustomView).setVisibility(View.GONE);
  }
 else {
    title.setText(builder.title);
    setTypeface(title,mediumFont);
    if (builder.titleColor != -1) {
      title.setTextColor(builder.titleColor);
    }
 else {
      title.setTextColor(DialogUtils.resolveColor(getContext(),android.R.attr.textColorPrimary));
    }
    if (builder.titleAlignment == Alignment.CENTER) {
      title.setGravity(Gravity.CENTER_HORIZONTAL);
    }
 else     if (builder.titleAlignment == Alignment.RIGHT) {
      title.setGravity(Gravity.RIGHT);
    }
  }
  invalidateActions();
  setOnShowListenerInternal();
  setViewInternal(view);
}
