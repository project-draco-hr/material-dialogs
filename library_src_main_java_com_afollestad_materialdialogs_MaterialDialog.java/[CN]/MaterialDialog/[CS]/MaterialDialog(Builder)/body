{
  super(getTheme(builder));
  this.regularFont=builder.regularFont;
  if (this.regularFont == null)   this.regularFont=TypefaceHelper.get(getContext(),"Roboto-Regular");
  this.mediumFont=builder.mediumFont;
  if (this.mediumFont == null)   this.mediumFont=TypefaceHelper.get(getContext(),"Roboto-Medium");
  mContext=builder.context;
  this.view=LayoutInflater.from(getContext()).inflate(R.layout.md_dialog,null);
  this.customView=builder.customView;
  this.callback=builder.callback;
  this.listCallback=builder.listCallback;
  this.listCallbackSingle=builder.listCallbackSingle;
  this.listCallbackMulti=builder.listCallbackMulti;
  this.positiveText=builder.positiveText;
  this.neutralText=builder.neutralText;
  this.negativeText=builder.negativeText;
  this.items=builder.items;
  this.setCancelable(builder.cancelable);
  this.selectedIndex=builder.selectedIndex;
  this.selectedIndices=builder.selectedIndices;
  this.autoDismiss=builder.autoDismiss;
  this.adapter=builder.adapter;
  this.forceStacking=builder.forceStacking;
  this.positiveColor=builder.positiveColor;
  this.negativeColor=builder.negativeColor;
  this.neutralColor=builder.neutralColor;
  final int mdAccentColor=DialogUtils.resolveColor(mContext,R.attr.md_accent_color);
  if (mdAccentColor != 0) {
    this.positiveColor=mdAccentColor;
    this.negativeColor=mdAccentColor;
    this.neutralColor=mdAccentColor;
  }
  title=(TextView)view.findViewById(R.id.title);
  icon=(ImageView)view.findViewById(R.id.icon);
  titleFrame=view.findViewById(R.id.titleFrame);
  final TextView content=(TextView)view.findViewById(R.id.content);
  content.setText(builder.content);
  content.setMovementMethod(new LinkMovementMethod());
  setTypeface(content,regularFont);
  content.setLineSpacing(0f,builder.contentLineSpacingMultiplier);
  if (this.positiveColor == 0) {
    content.setLinkTextColor(DialogUtils.resolveColor(getContext(),android.R.attr.textColorPrimary));
  }
 else {
    content.setLinkTextColor(this.positiveColor);
  }
  if (builder.contentAlignment == Alignment.CENTER) {
    content.setGravity(Gravity.CENTER_HORIZONTAL);
  }
 else   if (builder.contentAlignment == Alignment.END) {
    content.setGravity(Gravity.START);
  }
  if (builder.contentColor != -1) {
    content.setTextColor(builder.contentColor);
  }
 else {
    final int fallback=DialogUtils.resolveColor(getContext(),android.R.attr.textColorSecondary);
    final int contentColor=DialogUtils.resolveColor(getContext(),R.attr.md_content_color,fallback);
    content.setTextColor(contentColor);
  }
  if (builder.theme == Theme.LIGHT) {
    defaultItemColor=Color.BLACK;
  }
 else {
    defaultItemColor=Color.WHITE;
  }
  if (customView != null) {
    title=(TextView)view.findViewById(R.id.titleCustomView);
    icon=(ImageView)view.findViewById(R.id.iconCustomView);
    titleFrame=view.findViewById(R.id.titleFrameCustomView);
    invalidateCustomViewAssociations();
    ((LinearLayout)view.findViewById(R.id.customViewFrame)).addView(customView);
  }
 else {
    invalidateCustomViewAssociations();
  }
  boolean adapterProvided=adapter != null;
  if (items != null && items.length > 0 || adapterProvided) {
    title=(TextView)view.findViewById(R.id.titleCustomView);
    icon=(ImageView)view.findViewById(R.id.iconCustomView);
    titleFrame=view.findViewById(R.id.titleFrameCustomView);
    listView=(ListView)view.findViewById(R.id.contentListView);
    listView.setSelector(DialogUtils.resolveDrawable(getContext(),R.attr.md_selector));
    ((MeasureCallbackListView)listView).setCallback(this);
    if (!adapterProvided) {
      if (listCallbackSingle != null) {
        listType=ListType.SINGLE;
      }
 else       if (listCallbackMulti != null) {
        listType=ListType.MULTI;
        if (selectedIndices != null) {
          selectedIndicesList=new ArrayList<>(Arrays.asList(selectedIndices));
        }
 else {
          selectedIndicesList=new ArrayList<>();
        }
      }
 else {
        listType=ListType.REGULAR;
      }
      adapter=new MaterialDialogAdapter(mContext,ListType.getLayoutForType(listType),R.id.title,items);
    }
    adapter.registerDataSetObserver(new DataSetObserver(){
      @Override public void onChanged(){
        super.onChanged();
        listView.post(new Runnable(){
          @Override public void run(){
            invalidateCustomViewAssociations();
          }
        }
);
      }
    }
);
  }
  if (builder.icon != null) {
    icon.setVisibility(View.VISIBLE);
    icon.setImageDrawable(builder.icon);
  }
 else {
    Drawable d=DialogUtils.resolveDrawable(mContext,R.attr.md_icon);
    if (d != null) {
      icon.setVisibility(View.VISIBLE);
      icon.setImageDrawable(d);
    }
 else {
      icon.setVisibility(View.GONE);
    }
  }
  if (builder.title == null || builder.title.toString().trim().length() == 0) {
    titleFrame.setVisibility(View.GONE);
    if (customView == null)     view.findViewById(R.id.titleFrameCustomView).setVisibility(View.GONE);
  }
 else {
    title.setText(builder.title);
    setTypeface(title,mediumFont);
    if (builder.titleColor != -1) {
      title.setTextColor(builder.titleColor);
    }
 else {
      final int fallback=DialogUtils.resolveColor(getContext(),android.R.attr.textColorPrimary);
      title.setTextColor(DialogUtils.resolveColor(getContext(),R.attr.md_title_color,fallback));
    }
    if (builder.titleAlignment == Alignment.CENTER) {
      title.setGravity(Gravity.CENTER_HORIZONTAL);
    }
 else     if (builder.titleAlignment == Alignment.END) {
      title.setGravity(Gravity.END);
    }
  }
  if (builder.showListener != null) {
    setOnShowListener(builder.showListener);
  }
  if (builder.cancelListener != null) {
    setOnCancelListener(builder.cancelListener);
  }
  if (builder.dismissListener != null) {
    setOnDismissListener(builder.dismissListener);
  }
  invalidateActions();
  setOnShowListenerInternal();
  setViewInternal(view);
  if (builder.theme == Theme.LIGHT && Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1) {
    setInverseBackgroundForced(true);
    title.setTextColor(Color.BLACK);
    content.setTextColor(Color.BLACK);
  }
}
