{
  if (indeterminate) {
    new MaterialDialog.Builder(this).title(R.string.progress_dialog).content(R.string.please_wait).progress(true,0).progressIndeterminateStyle(horizontalIndeterminate).show();
  }
 else {
    new MaterialDialog.Builder(this).title(R.string.progress_dialog).content(R.string.please_wait).contentGravity(GravityEnum.CENTER).progress(false,150,true).cancelListener(new DialogInterface.OnCancelListener(){
      @Override public void onCancel(      DialogInterface dialog){
        if (mThread != null)         mThread.interrupt();
      }
    }
).showListener(new DialogInterface.OnShowListener(){
      @Override public void onShow(      DialogInterface dialogInterface){
        final MaterialDialog dialog=(MaterialDialog)dialogInterface;
        startThread(new Runnable(){
          @Override public void run(){
            while (dialog.getCurrentProgress() != dialog.getMaxProgress() && !Thread.currentThread().isInterrupted()) {
              if (dialog.isCancelled())               break;
              try {
                Thread.sleep(50);
              }
 catch (              InterruptedException e) {
                break;
              }
              dialog.incrementProgress(1);
            }
            runOnUiThread(new Runnable(){
              @Override public void run(){
                mThread=null;
                dialog.setContent(getString(R.string.done));
              }
            }
);
          }
        }
);
      }
    }
).show();
  }
}
