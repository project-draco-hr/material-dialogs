{
  if (recyclerView == null)   return;
  recyclerView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @SuppressWarnings("ConstantConditions") @Override public void onGlobalLayout(){
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        recyclerView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
 else {
        recyclerView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
      if (listType == ListType.SINGLE || listType == ListType.MULTI) {
        int selectedIndex;
        if (listType == ListType.SINGLE) {
          if (mBuilder.selectedIndex < 0)           return;
          selectedIndex=mBuilder.selectedIndex;
        }
 else {
          if (selectedIndicesList == null || selectedIndicesList.size() == 0)           return;
          Collections.sort(selectedIndicesList);
          selectedIndex=selectedIndicesList.get(0);
        }
        int lastVisiblePosition;
        int firstVisiblePosition;
        if (mBuilder.layoutManager instanceof LinearLayoutManager) {
          lastVisiblePosition=((LinearLayoutManager)mBuilder.layoutManager).findLastVisibleItemPosition();
          firstVisiblePosition=((LinearLayoutManager)mBuilder.layoutManager).findFirstVisibleItemPosition();
        }
 else         if (mBuilder.layoutManager instanceof GridLayoutManager) {
          lastVisiblePosition=((GridLayoutManager)mBuilder.layoutManager).findLastVisibleItemPosition();
          firstVisiblePosition=((GridLayoutManager)mBuilder.layoutManager).findFirstVisibleItemPosition();
        }
 else {
          throw new IllegalStateException("Unsupported layout manager type: " + mBuilder.layoutManager.getClass().getName());
        }
        if (lastVisiblePosition < selectedIndex) {
          final int totalVisible=lastVisiblePosition - firstVisiblePosition;
          int scrollIndex=selectedIndex - (totalVisible / 2);
          if (scrollIndex < 0)           scrollIndex=0;
          final int fScrollIndex=scrollIndex;
          recyclerView.post(new Runnable(){
            @Override public void run(){
              recyclerView.requestFocus();
              recyclerView.scrollToPosition(fScrollIndex);
            }
          }
);
        }
      }
    }
  }
);
}
